name: "CI/CD"
on: [push]

env:
  CI: "true"
  CODECOV: "true"

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Run Rubocop
        run: bundle exec rubocop -P
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Run Specs
        run: bundle exec rspec
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
  build_doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Build with RDoc
        # Outputs to the './_site' directory by default
        run: bundle exec rake rdoc
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: rdoc
  release:
    if: "github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'"
    needs: [lint, tests, build_doc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Setup git and gh
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
      - run: gem install parse_gemspec-cli
        name: Intall gem parser
      - run: echo "::set-output name=tag::$(parse-gemspec-cli *.gemspec | jq .'version')"
        name: Set tag version
        id: set_tag
      - name: Add tag and push
        run: |
          git tag
          git push --tags
      - name: Create release
        run: gh release create ${{ steps.set_tag.outputs.tag }} --generate-notes
  deploy_rdoc:
    needs: [build_doc, release]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
  publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Publish to RubyGems
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:rubygems_api_key: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
          gem build *.gemspec
          gem push *.gem
        env:
          GEM_HOST_API_KEY: "${{secrets.RUBYGEMS_API_KEY}}"